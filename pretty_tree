
#we have binary tree, the tree is pretty when every leaves is located on the same level. Width od tree is number of leaves and the high is the number of location of leaves(root is on the 0 level)
#we have to return minimal number of edges which we have to remove to create pretty tree, which have the largest width and the higher is the largest among the trees with maximal width

class Node:
  def __init__( self ):
    self.left = None    # lewe poddrzewo
    self.right = None   # prawe poddrzewo
    self.x = None       # pole do wykorzystania przez studentow

def written(A,number):
    numberk=number+1
    A.x=number
    if A.left is not None:
        written(A.left,number)
    if A.right is not None:
        written(A.right,number)

def max_level(A,table):
    table.append(A.x)
    if A.left is not None:
        max_level(A.left,table)
    if A.right is not None:
        max_level(A.right,table)

def tree_built(A,number,tree):
    if A.left is not None:
        if A.left.x==number:
            tree.append(A.left)
        A.left.x=A
        tree_built(A.left,number,tree)
    if A.right is not None:
        if A.right.x==number:
            tree.append(A.right)
        A.right.x=A
        tree_built(A.right,number,tree)
def searching_root(A,minimal_tree):
    if A in minimal_tree:
        pass
    else:
        minimal_tree.append(A)
    if A.x != 0:
        searching_root(A.x,minimal_tree)
def cut(minimal_tree,tab,A):
    if A.right is not None:
        if A.right in minimal_tree:
            cut(minimal_tree,tab,A.right)
        else:
            tab.append(0)

    if A.left is not None:
        if A.left in minimal_tree:
            cut(minimal_tree,tab,A.left)

        else:
            tab.append(0)

def wideentall(T):
    print(T)
    written(T,-1)
    table=[]
    max_level(T,table)
    maksi=0
    for i in range(len(table)):
        if table[i]>maksi:
            maksi=table[i]
    counting=[0 for _ in range(maksi+1)]
    for i in range(len(table)):
        counting[table[i]]+=1


    number=0
    for i in range(len(counting)):
        if i>0 and counting[i]>=number:
            save_indeks=i
            number=counting[i]
    tree=[]
    tree_built(T,save_indeks,tree)
    minimal_tree=[]

    for i in tree:
        searching_root(i,minimal_tree)
    tab=[]
    cut(minimal_tree,tab,T)
    return len(tab)
