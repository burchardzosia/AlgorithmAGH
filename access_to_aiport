#on first we get list of tuples, every means that we can bulid road between cities for the given cost, In every city we can build aiport for the given cost-k
#every city should habe an access to the aiport
import math
from queue import PriorityQueue
def relax(graph,u,v,distance,parent):
    if distance[v]>distance[u]+graph[u][v]:
        distance[v]=distance[u]+graph[u][v]
        parent[v]=u
        return True
    return False


def lotniska(graph,source,t):
    queue=PriorityQueue()
    queue.put((0,source))
    visited=[False]*len(graph)
    parent=[None]*len(graph)
    distance=[math.inf]*len(graph)
    distance[source]=0
    while not queue.empty():
        dist,u=queue.get()
        for v in range(len(graph[u])):
                if graph[u][v]!=0 and not visited[v]:
                    if relax(graph,u,v,distance,parent):
                        queue.put((distance[u]+graph[u][v],v))

        visited[u]=True
    return distance[t]

def airports(G,A,s,t):
    table=[[math.inf for i in range(len(G))]for j in range(len(G))]
    tab=[]
    for i in range(len(G)):
        for j in range(len(G[i])):
                a=G[i][j][0]
                tab.append(a)
        for k in range(len(G)):
            if k not in tab:
                G[i].append((k,A[k]+A[i]))

        tab=[]

    for i in range(len(G)):
        for j in range(len(G[i])):
                a = G[i][j][0]
                if a!=i:
                    table[i][a]=G[i][j][1]
                else:
                    table[i][a]=math.inf
    return lotniska(tablica,s,t)


if __name__ == "__main__":
    G=[[(1, 3), (3, 2)], [(0, 3), (2, 20)], [(1, 20), (5, 1), (3, 6)], [(0, 2), (2, 6), (4, 1)], [(3, 1), (5, 7)], [(4, 7), (2, 1)]]
    S = [50, 100, 1, 20, 2, 70]
    print(airports(G,S,0,5))
