#Is tree included the shortest path 
from queue import PriorityQueue
from math import inf


def relax(graph, u, v, distance, parent):
    if distance[v] > distance[u] + graph[u][v]:
        distance[v] = distance[u] + graph[u][v]
        parent[v] = u
        return True
    return False



def dijkstra_algorithm(graph, source):

    queue = PriorityQueue()
    queue.put((0, source))
    visited = [False] * len(graph)
    parent = [None] * len(graph)
    distance = [inf] * len(graph)
    distance[source] = 0
    distance[1]=1
    distance[5]=1
    distance[4]=2
    distance[3]=3
    distance[2]=4
    while not queue.empty():
        dist, u = queue.get()
        for v in range(len(graph[u])):
            if graph[u][v] != 0 and not visited[v]:
                if relax(graph, u, v, distance, parent):
                    print(u)
                    print(v)
                    return False
        visited[u] = True
    return True
if __name__ == "__main__":
    G=[[0,2,0,0,0,3],[2,0,8,0,5,0],[0,8,0,1,0,0],[0,0,1,0,1,0],[0,5,0,1,0,1],[3,0,0,0,1,0]]
    print(dijkstra_algorithm(G,0))
