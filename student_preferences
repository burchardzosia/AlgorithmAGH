from queue import Queue
from math import inf
#students choose rooms
# everyone has 3 preferences but possibility is write (2,3,None)-that means student want to live only in 2 or 3 room
#the algorithm should assign rooms so that the most students are satisfied
#how many students will be dissatisfied
def bfs(graph, s, t, parent):
    queue = Queue()
    visited = [False] * len(graph)
    visited[s] = True
    queue.put(s)
    while not queue.empty():
        u = queue.get()
        for v in range(len(graph)):
            if not visited[v] and graph[u][v] != 0:
                visited[v] = True
                parent[v] = u
                queue.put(v)
    return visited[t]


def edmonds_karp_algorithm(graph, s, t):
    parent = [None] * len(graph)
    max_flow = 0
    while bfs(graph, s, t, parent):
        current_flow = inf
        current = t
        while current != s:
            current_flow = min(current_flow, graph[parent[current]][current])
            current = parent[current]
        max_flow += current_flow
        v = t
        while v != s:
            u = parent[v]
            graph[u][v] -= current_flow
            graph[v][u] += current_flow
            v = parent[v]
    return max_flow

def akademik(T):
    graph=[[0 for i in range(2*len(T)+2)]for k in range(2*len(T)+2)]
    for i in range(1,len(T)+1):
        graph[0][i]=1
    i=0
    for i in range(1,len(T)+1):
        for j in T[i-1]:
            if j is not None:
                graph[i][len(T)+1+j]=1
    i=0
    k=0
    for i in range(len(T)+1,2*len(T)+1):
        graph[i][2*len(T)+1]=1

    a= edmonds_karp_algorithm(graph,0,2*len(T)+1)
    return len(T)-a









T =  [(4, 9, None), (5, 9, None), (3, 7, None), (0, 7, 10), (2, 8, 9), (None, None, None), (2, 6, None), (0, 9, None), (4, 6, 11), (None, None, None), (3, 7, None), (0, None, None), (5, 6, 8), (0, 5, None), (3, 6, 11)]
print(akademik(T))
